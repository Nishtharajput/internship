# -*- coding: utf-8 -*-
"""python_internship

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yv03c4qmZl5Yr12YBn5xpz36sKqJDavo

Ques: To display the input time(in sec) into Hour:Minutes:second
"""

time=int(input("Enter the time in second:"))
if(time>=0):
    hour=0
    min=0
    if(time>=3600):
        hour=time//3600
        min=time%3600//60
        sec=time%60
        print(hour,"Hour:",min,"Minute:",sec,"Second")
    elif((time>=60)and(time<3600)):
        min=time//60
        sec=time%60
        print(min,"Minute:",sec,"Second")
    elif(time<60):
        print(time,"Second")
else:
    print("Invalid input time in negative")

"""Ques: To find greatest between two number."""

first=int(input("Enter the First number: "))
second=int(input("Enter the Second number: "))
if(first>second):
    print(first,"is greater than",second)
elif(first==second):
    print("Both number are equals")
else:
    print(second,"is greater than",first)

"""Ques: Given the Cost Price(CP) and Selling Price(SP) of a product. The task is to Calculate the Profit or Loss."""

cp=float(input("Enter the Cost price: "))
sp=float(input("Enter the Selling price: "))
if(cp<0):
    print("Cost Price can not be negative")
elif(sp<0):
    print("Selling Price can not be negative")
else:
  if(sp>cp):
      print("Profit is : ",(sp-cp))
  elif(cp>sp):
      print("Loss is : ",(cp-sp))
  else:
      print("No Profit No Loss")

"""Ques: To display the numbers between 10 and 500 divisible by both 7 and 10 using For Loop."""

print("The numbers between 10 and 500 divisible by both 7 and 10 are :")
for x in range(10,500):
    if(x%7==0 and x%10==0):
        print(x,end=",")

"""Ques: To count the numbers between 100 and 1000 which is even and also divisible by 3 using For Loop."""

count=0
print("Numbers between 100 and 1000 which is even and also divisible by 3 are : ")
for x in range(100,1000):
    if(x%2==0 and x%3==0):
        print(x,end=',')
        count=count+1
print(" ")
print("Total numbers between 100 and 1000 which are even and divisible by 3 is",count)

"""Ques: To count the numbers between 100 and 1000 which is even and also divisible by 3 using while Loop."""

x=100
count=0
print("Numbers between 100 and 1000 which is even and also divisible by 3 are : ")
while(x<1000):
  if(x%2==0 and x%3==0):
    print(x,end=',')
    count=count+1
  x=x+1
print(" ")
print("Total numbers between 100 and 1000 which are even and divisible by 3 is",count)

"""Create and display the list.

"""

list=[1,2,3,4,"hello"]
print("Display the list with formatting: ")
print(list)
print("Display the list without formatting:")
print(*list)
print("Display the list element by element using for loop: ")
for x in list:
  print(x)

"""Acess element of a list using indexing"""

list=[1,2,3,4,5,"hello","World",6,7]
print("List is:",list)
print("Fetching 3rd element of a list: ")
print(list[2])
print("fetching 4th element from last of a list:")
print(list[-4])
print("Fetching elements from 3rd to 10th position in a list:")
print(list[2:10])
print("Fetching alternate elements from 3rd to 10th position in a list:")
print(list[2:10:2])

"""Ques: Create a list of 20 numbers and print the number in backward direction using forward indexing"""

list=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,15,18,19,20]
print("List is ",list)
print("Display the element of a list in backward direction using forward indexing :")
x=len(list)-1
for i in range(x,-1,-1):
    print(list[i],end=',')

"""Insertion of element in a list."""

list1=[1,2,3,4,5]
print("List1 is ",list1)
list2=[6,7,8,9,10]
print("List2 is ",list2)
#append() is used to insert only one element of a list in another list.
print("Insert the element of a list2 in list1 by using append method:")
for x in list2:
    list1.append(x)
print(list1)
# extend() is used to insert all element of any sequence datatype in a List.
tuple1=(11,12,13,14,15)
print("tuple1 is ",tuple1)
print("Insert the element of a tuple1 in list1 by using extend method:")
list1.extend(tuple1)
print(list1)
#insert() is used insert the element at specified position in a list.
print("Insert the element 15 at index 3 in list2:")
list2.insert(3,15)
print(list2)

"""Deletion of element from a list."""

list1=[1,2,1,3,3,4,5,6]
print("list1 is: ",list1)
print("Delete the element of a list1 having index 2 using pop()")
list1.pop(2)
print("After deletion,list1 is ",list1)
print("Remove the first occurrence of a element 3 from a list1 using remove()")
list1.remove(3)
print("After deletion , list1 is ",list1)
print("Remove all element of list1 using clear()")
list1.clear()
print("list1 is empty i.e.",list1)

"""Ques: Find the method to insert all the element of another sequence datatype at particular index in the list. But all the element must be inserted one by one."""

List1=[1,2,3,4,8,9,10]
print("List1 is",List1)
List2=[5,6,7]
print("List2 is ",List2)
index=int(input("Enter the index where you want to insert the List2 in List1: "))
if(index>=0 and index<len(List1)):
  for i in range(len(List2)):
     List1.insert(index+i,List2[i])
  print("Updated List1 will be: ",List1)
elif(index<0 and index>=-len(List1)):
  for i in range(len(List2)):
     List1.insert(index,List2[i])
  print("Updated List1 will be: ",List1)
else:
  print("Entered index",index,"is out of range")

"""Create and display the student  dataset in tabular form by using List"""

from tabulate import tabulate

# Creating student dataset using List
student_data = [
    ["std101", "Ashish Kumar", "10th", 15, 67, 89, 87, 89, 90, 422],
    ["std102", "Abhishek Kumar", "10th", 15, 34, 45, 78, 45, 31, 233],
    ["std103", "Aman", "10th", 15, 56, 56, 78, 78, 45, 313],
    ["std104", "Rahul", "10th", 15, 78, 67, 89, 89, 78, 402],
    ["std105", "Ruby", "10th", 13, 89, 56, 45, 45, 67, 302],
    ["std106", "Suman", "10th", 13, 67, 67, 67, 67, 67, 335],
    ["std107", "Saurabh", "10th", 15, 45, 23, 45, 78, 67, 258],
    ["std108", "Sumit", "10th", 15, 89, 90, 89, 90, 45, 403],
    ["std109", "Kamlesh", "10th", 15, 78, 45, 78, 78, 78, 337],
    ["std110", "Rohan", "10th", 15, 12, 24, 45, 56, 34, 171]
]

# Define the headers
headers = ["stdid", "stdname", "standard", "Age", "Hindi", "English", "Maths", "Science", "Computer", "Total"]

# Display the table
print("Student dataset in table:")
print(tabulate(student_data, headers=headers, tablefmt="grid"))
print( )
# Define the index for English marks
english_index = 5

# Find and print the names of students with English marks greater than 50 using a for loop
print("Students with English marks greater than 70:")
for row in student_data:
    if row[english_index] > 50:
        print(row[1])
print("------------*-------------*-------------*--------------*-------------")
print("Name and Age of a student who are top four scorer in Maths:")
# Extract student name, age, and Maths score
relevant_data = [(row[1], row[3], row[6]) for row in student_data]

# Sort the data by Maths score in descending order
sorted_data = sorted(relevant_data, key=lambda x: x[2], reverse=True)

# Select the top four students
top_four = sorted_data[0:4]

# Print the top four students' names and ages
for student in top_four:
    print("Student Name:" ,student[0],", Age:", student[1])
print("------------*-------------*-------------*--------------*-------------")
print("Name, Id and Age of student who are bottom three scorer in Computer:")
# Extract student id,name, age, and computer score
relevant_data = [(row[0], row[1],row[3], row[8]) for row in student_data]

# Sort the data by computer score in ascending order
sorted_data = sorted(relevant_data, key=lambda x: x[3])

# Select the bottom three students
bottom_three = sorted_data[0:3]

# Print the bottom three students id, names and ages
for student in bottom_three:
    print("Student Id: ",student[0],", Student Name:", student[1],", Age:", student[2])

"""Ques: Print the element of tuple in backward direction using forward indexing"""

# print the tuple in backward direction using forward indexing
tuple=(1,2,3,4,5)
print("Tuple is:",tuple)
print("Display the element of tuple in backward direction using forward indexing: ")
x=len(tuple)-1
for i in range(x,-1,-1):
  print(tuple[i],end=',')

"""Ques: Print the element of tuple in forward direction using backward indexing"""

tuple=(1,2,3,4,5)
print("Tuple is:",tuple)
print("Display the element of tuple in forward direction using backward indexing: ")
x=len(tuple)
for i in range(-x,0):
  print(tuple[i],end=',')

"""Creating a dictionary and access it's element (key:value)"""

#Creating a Dictionary
student_data={'stdid':'std101','stdname': 'Ashish Kumar','standard': '10th','age': 15}
print("Dictionary is ",student_data)
#insert element with key standard
print(" ")
print("Insert element with key standard in student dictionary: ")
student_data['standard']='12th'
print(student_data)
#insert an element with key hindi
print(" ")
print("Insert element with key hindi in student dictionary: ")
student_data['hindi']=78
print(student_data)
#find the key of dictionary
print(" ")
print("Keys in student dictionary are")
for key in student_data:
  print(key)
#print the value of dictionary with it's key
print(' ')
print("Elements of dictionary in (key:value pair):")
for key in student_data:
  print(key,":",student_data[key])

"""Using basic dictionary method"""

student_data={'stdid':'std101','stdname': 'Ashish Kumar','standard': '10th','age': 15,'hindi':67,'English':89}
#To display the dictionary
print("Dictionary is :")
print(student_data)
#delete element having key as hindi
print(" ")
print("Removing the element from dictionary having key as hindi :")
student_data.pop('hindi')
print(student_data)
#To delete the last item in dictionary
print(" ")
print("Removing the last item from a dictioary")
student_data.popitem()
print(student_data)
#Using keys()
#to return the keys of all the element in List
print(" ")
print("Display the list of keys in List")
element_keys=student_data.keys()
print(element_keys)
#Using values()
#To return the values of all the element in List of a Dictionary
print(" ")
print("Display the list of values in List")
element_values=student_data.values()
print(element_values)
#Using items()
#To return the a list of items
print(" ")
print("Display the list of item of a dictionary in List")
dict_items=student_data.items()
print(dict_items)
#To find all the value of all the element
print(" ")
print("Display the values of all key of a Dictionary: ")
for data in student_data.values():
  print(data)
print("------------*----------------*------------------*----------------")
#using get()
#To check the whether key is available in a dictionary or not
print("Is key (maths) is available in dictionary?  ")
x= student_data.get('maths')
print(x)
print('------------------*-------------------*---------------*------------')
# Using update()
dict1={'name':'Amit','Age':15,'standard':'10th'}
print("Dictionary1 is: ",dict1)
dict2={'hindi':67,'Age':16,'standard':"12th",'English':67}
print("Dictionary2 is: ",dict2)
# inserting all the element of the dict2 into dict1
print(" ")
print("Inserting all the element of the dictionary2 into dictionary1: ")
dict1.update(dict2)
print(dict1)
print('------------------*-------------------*---------------*------------')
#Using fromkeys()
print("Using fromkeys method in dictionary1 in key 'english':")
x=dict1.fromkeys('english',16)
print(x)
print(" ")
print("Using fromkeys method in dictionary1 in it's keys and values: ")
y=dict1.fromkeys(dict1.keys(),dict1.values())
print(y)
print(" ")
print("Using fromkeys method in dictionary1 in it's keys and using value '16':")
z=dict1.fromkeys(dict1.keys(),16)
print(z)
print("-------------------*-----------------*----------------*----------------")
#Using len()
#To find the no. of element of a dictionary
print("Length of the dictionary1 is :")
print(len(dict1))

"""Create and display the student dataset in tabular form by using Dictionary"""

from tabulate import tabulate
# Using DICTIONARY
# Data of the Student from Excel
data = [
    {"stdid": "std101", "stdname": "Ashish Kumar", "standard": "10th", "Age": 15, "Hindi": 67, "English": 89, "Maths": 87, "Science": 89, "Computer": 90, "Total": 422},
    {"stdid": "std102", "stdname": "Abhishek Kumar", "standard": "10th", "Age": 15, "Hindi": 34, "English": 45, "Maths": 78, "Science": 45, "Computer": 31, "Total": 233},
    {"stdid": "std103", "stdname": "Aman", "standard": "10th", "Age": 15, "Hindi": 56, "English": 56, "Maths": 78, "Science": 78, "Computer": 45, "Total": 313},
    {"stdid": "std104", "stdname": "Rahul", "standard": "10th", "Age": 15, "Hindi": 78, "English": 67, "Maths": 89, "Science": 89, "Computer": 78, "Total": 402},
    {"stdid": "std105", "stdname": "Ruby", "standard": "10th", "Age": 13, "Hindi": 89, "English": 56, "Maths": 45, "Science": 45, "Computer": 67, "Total": 302},
    {"stdid": "std106", "stdname": "Suman", "standard": "10th", "Age": 13, "Hindi": 67, "English": 67, "Maths": 67, "Science": 67, "Computer": 67, "Total": 335},
    {"stdid": "std107", "stdname": "Saurabh", "standard": "10th", "Age": 15, "Hindi": 45, "English": 23, "Maths": 45, "Science": 78, "Computer": 67, "Total": 258},
    {"stdid": "std108", "stdname": "Sumit", "standard": "10th", "Age": 15, "Hindi": 89, "English": 90, "Maths": 89, "Science": 90, "Computer": 45, "Total": 403},
    {"stdid": "std109", "stdname": "Kamlesh", "standard": "10th", "Age": 15, "Hindi": 78, "English": 45, "Maths": 78, "Science": 78, "Computer": 78, "Total": 337},
    {"stdid": "std110", "stdname": "Rohan", "standard": "10th", "Age": 15, "Hindi": 12, "English": 24, "Maths": 45, "Science": 56, "Computer": 34, "Total": 171}
]
# To print the data in tabular form
print(tabulate(data, headers="keys", tablefmt="grid"))
# Initialize an empty list to store names of students
filtered_students = []
# To check if the student's English marks is greater than 50
for student in data:
    if student["English"] > 50:
        filtered_students.append(student["stdname"])
# Print the names of students
print("Students whose marks in English are greater than 50:")
for name in filtered_students:
    print(name)

print("------------------*------------------*-----------------*------------------")
print("Name and Age of a student who are top four scorer in Maths:")
# Sort data based on Maths scores in descending order
sorted_data = sorted(data, key=lambda x: x["Maths"], reverse=True)
top_four = sorted_data[0:4]
# Prepare table data that contain the name and age of top four scorer of Maths
table_data = [[student["stdname"], student["Age"]] for student in top_four]
# Display the table_data in tabular form
print(tabulate(table_data, headers=["Student Name", "Age"], tablefmt="grid"))

print("------------------*------------------*-----------------*------------------")
print("Name, Id and Age of student who are bottom three scorer in Computer:")
# Sort data based on Computer scores in ascending order
sorted_data = sorted(data, key=lambda x: x["Computer"])
bottom_three = sorted_data[:3]

#Prepare table data that contain the Name ,Id and Age of bottom three scorer in Computer
table_data = [[student["stdname"], student["stdid"], student["Age"]] for student in bottom_three]
# Display the table_data in tabular form
print(tabulate(table_data, headers=["Student Name", "Student ID", "Age"], tablefmt="grid"))